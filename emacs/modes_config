;;
;; Maude
;;
(require 'maude-mode)
(add-to-list 'auto-mode-alist '("\\.maude\\'" . maude-mode))


;;
;; Octave
;;
(add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))


;;
;; OpenCL
;;
(require 'opencl-mode)
(add-to-list 'auto-mode-alist '("\\.cl\\'" . opencl-mode))
(add-to-list 'auto-mode-alist '("\\.cuh\\'" . opencl-mode))


;;
;; Neo-tree
;;
(add-to-list 'load-path "~/.emacs-lisp/neotree")
(require 'neotree)
;; F9 para abrir el arbol de directorios
(global-set-key [f9] 'neotree-toggle)
;; Cuando se abre el arbol, se situa directamente en el directorio actual
(setq neo-smart-open t)


;;
;; Irony-mode
;; https://github.com/martin-tornqvist/env/blob/master/how-to-setup-irony-mode.txt
;;

;; irony-mode 
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)

;; company mode
(add-hook 'c++-mode-hook 'company-mode)
(add-hook 'c-mode-hook 'company-mode)

;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))
;; (optional) adds CC special commands to `company-begin-commands' in order to
;; trigger completion at interesting places, such as after scope operator
;;     std::|
(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)

;; flycheck-mode
(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

;; eldoc-mode
(add-hook 'irony-mode-hook 'irony-eldoc)

;; (optional) bind TAB for indent-or-complete
(defun irony--check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))
(defun irony--indent-or-complete ()
  "Indent or Complete"
  (interactive)
  (cond ((and (not (use-region-p))
              (irony--check-expansion))
         (message "complete")
         (company-complete-common))
        (t
         (message "indent")
         (call-interactively 'c-indent-line-or-region))))
(defun irony-mode-keys ()
  "Modify keymaps used by `irony-mode'."
  (local-set-key (kbd "TAB") 'irony--indent-or-complete)
  (local-set-key [tab] 'irony--indent-or-complete))
(add-hook 'c-mode-common-hook 'irony-mode-keys)
;; Add include folders
(setq irony-additional-clang-options '("-std=c++11"
				       "-Wall"
				       "-Wextra"
				       "-lm"
				       "-DDEBUG"))

;;
;; LaTeX -- AucTeX, RefTeX
;;
(setq TeX-PDF-mode t)
(setq latex-run-command "pdflatex")

(add-hook 'LaTeX-mode-hook 'turn-on-reftex) ; Activamos reftec + auctex
(setq reftex-plug-into-AUCTeX t)            ; Conectar auctex con reftex
(setq TeX-default-mode 'LaTeX-mode)         ; forzamos que tex sea LaTeX
(setq TeX-force-default-mode t)
(setq TeX-parse-self t)                     ; recorre el fichero defs propias
(setq TeX-auto-save t)                      ; guardado de simbolos, comandos, etc

(add-hook 'LaTeX-mode-hook 'flyspell-mode) ; Syntax check with latex


